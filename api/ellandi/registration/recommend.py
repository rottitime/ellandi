import random

import pandas as pd

from ellandi.registration.models import (
    SkillRecommendation,
    TitleRecommendation,
)


def recommend_relevant_user_skills(skills_list, job_title):
    """Given a Django request of user skills, a list of skills, and a job title, and returns a random selection
    of recommendations, by comining recommendations based on title and each individual skill into a bundle

    Alter hard-coded variables to change the number of recommendations returned, and how many are linked to job title
    or existing skills.  If there are insufficient skills generated by skill similarity, will substitute for job title.
    """

    total_skill_count = 10
    skill_recommendation_count = 5
    title_recommendation_count = 5

    recommended_skills = []

    skill_recommended_skills = []

    if len(skills_list) > 0:

        for skill in skills_list:
            skill_recommendation = recommend_skill_from_db(skill)
            if skill_recommendation is not None:
                skill_recommended_skills.extend(skill_recommendation)

    random.shuffle(recommended_skills)
    if len(skill_recommended_skills) < skill_recommendation_count:
        title_recommendation_count = total_skill_count - len(skill_recommended_skills)

    job_title_skills = recommend_title_from_db(job_title)

    combined = skill_recommended_skills[0:skill_recommendation_count] + job_title_skills[0:title_recommendation_count]

    return combined


def recommend_skill_from_db(existing_skill):
    """Given an existing skill, queries the pre-baked recommendations from the database"""

    all_entries = SkillRecommendation.objects.filter(current_skill=existing_skill).order_by("-created_at").values()
    df = pd.DataFrame(list(all_entries)).drop_duplicates(subset=["recommended_skill"])
    if len(df) > 0:
        return df["recommended_skill"].tolist()
    else:
        return None


def recommend_title_from_db(current_title):
    """Given an existing job title, queries the pre-baked recommendations from the database"""

    all_entries = TitleRecommendation.objects.filter(job_title=current_title).order_by("-index").values()
    print(pd.DataFrame(list(all_entries)))
    df = pd.DataFrame(list(all_entries)).drop_duplicates(subset=["recommended_skill"])
    return df["recommended_skill"].tolist()
