name: Deploy App

env:
  DOCKER_BUILDKIT: 1
  BRANCH_SPACE_MAP: '{"temp": "temp", "develop": "develop", "main": "prod"}'

on:
  push:
    branches:
      - temp
      - develop
      - prod

permissions:
  packages: write
  repository-projects: read
  id-token: write
  contents: read


jobs:
  push_images:
    runs-on: ubuntu-latest

    env:
      IMAGE_TAG: ${{ github.ref_name }}
      DOCKER_REPOSITORY: ghcr.io
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: https://ellandi-api-${{ github.ref_name }}.london.cloudapps.digital

    strategy:
      matrix:
        app: [ellandi-api, ellandi-web, organogram]
        include:
          - app: ellandi-api
            dockerfile: docker/api/Dockerfile
          - app: ellandi-web
            dockerfile: docker/web/Dockerfile
          - app: organogram
            dockerfile: docker/organogram/Dockerfile

    steps:
      - uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build, tag, and push ${{ matrix.app }} image
        env:
          DOCKER_FILE: ${{ matrix.dockerfile }}
          DOCKER_IMAGE: ${{ matrix.app }}

        run: |
          docker build . --file $DOCKER_FILE --tag $DOCKER_REPOSITORY/${{ github.repository_owner }}/$DOCKER_IMAGE:$IMAGE_TAG --build-arg NODE_ENV=$NODE_ENV --build-arg NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL
          docker push -a $DOCKER_REPOSITORY/${{ github.repository_owner }}/$DOCKER_IMAGE

  deploy_image:
    needs: [push_images]

    runs-on: ubuntu-latest

    env:
      IMAGE_TAG: ${{ github.ref_name }}
      DOCKER_REPOSITORY: ghcr.io
      CF_SPACE: ${{ fromJson(env.BRANCH_SPACE_MAP)[github.ref_name] }}

    strategy:
      matrix:
        app: [ellandi-api, ellandi-web, organogram]

    steps:
      - uses: actions/checkout@v3

      - name: Download CF CLI
        run: curl -L "https://packages.cloudfoundry.org/stable?release=linux64-binary&version=v7&source=github" | tar -zx

      - name: CF login
        run: ./cf login -a api.london.cloud.service.gov.uk -u "${{ secrets.CF_USER }}" -p "${{ secrets.CF_PASSWORD }}" -o co-i-ai -s "$CF_SPACE"

      - name: CF push ${{ matrix.app }}
        env:
          DOCKER_FILE: ${{ matrix.dockerfile }}
          DOCKER_IMAGE: ${{ matrix.app }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
        run: CF_DOCKER_PASSWORD="$GITHUB_TOKEN" ./cf push -f manifests/"$CF_SPACE/${{ matrix.app }}"_manifest.yml --docker-image $DOCKER_REPOSITORY/${{ github.repository_owner }}/$DOCKER_IMAGE:$IMAGE_TAG --docker-username=$GITHUB_ACTOR

      - uses: actions/checkout@v2
      - name: Slack Notification
        continue-on-error: true
        if: ${{ failure() && github.ref_name == 'prod' || failure() && github.ref_name == 'develop' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: '#FF0000'
          SLACK_ICON: https://avatars0.githubusercontent.com/u/818058?s=200&v=4
          SLACK_TITLE: '${{ github.ref_name }} deployment ${{ job.status }} :warning:'
          SLACK_USERNAME: ${{ github.actor }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: '${{ github.ref_name }} Action ${{ job.status }}'
